################################################################################
# Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The OpenAirInterface Software Alliance licenses this file to You under
# the terms found in the LICENSE file in the root of this source tree.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#-------------------------------------------------------------------------------
# For more information about the OpenAirInterface (OAI) Software Alliance:
#      contact@openairinterface.org
################################################################################

# file build_helper
# brief
# author Laurent Thomas, Lionel GAUTHIER
#
#######################################
SUPPORTED_DISTRO="Ubuntu 14.04/16.04/17.04/17.10/18.04, CentOS 7/8, RHEL 7/8"
if [ ! -f /etc/os-release ]; then
  echo_fatal "No /etc/os-release file found. You're likely on an unsupported distro."
fi
OS_DISTRO=$(grep "^ID=" /etc/os-release | sed "s/ID=//" | sed "s/\"//g")
OS_RELEASE=$(grep "^VERSION_ID=" /etc/os-release | sed "s/VERSION_ID=//" | sed "s/\"//g")
case "$OS_DISTRO" in
  fedora) OS_BASEDISTRO="fedora"; INSTALLER="dnf"; CMAKE="cmake" ;;
  rhel)   OS_BASEDISTRO="fedora"; INSTALLER="yum"; CMAKE="cmake3" ;;
  centos) OS_BASEDISTRO="fedora"; INSTALLER="yum"; CMAKE="cmake3" ;;
  debian) OS_BASEDISTRO="debian"; INSTALLER="apt-get"; CMAKE="cmake" ;;
  ubuntu) OS_BASEDISTRO="debian"; INSTALLER="apt-get"; CMAKE="cmake" ;;
esac

IS_CONTAINER=`egrep -c "docker|podman|kubepods|libpod|buildah" /proc/self/cgroup || true`

if [ $IS_CONTAINER -eq 0 ]
then
  SUDO='sudo -S -E'
else
  SUDO=''
fi

###############################
## echo and  family
###############################
black='\E[30m'
red='\E[31m'
green='\E[32m'
yellow='\E[33m'
blue='\E[1;34m'
magenta='\E[35m'
cyan='\E[36m'
white='\E[37m'
reset_color='\E[00m'
COLORIZE=1

#-------------------------------------------------------------------------------
cecho()  {
    # Color-echo
    # arg1 = message
    # arg2 = color
    local default_msg="No Message."
    message=${1:-$default_msg}
    color=${2:-$green}
    [ "$COLORIZE" = "1" ] && message="$color$message$reset_color"
    echo -e "$message"
    return
}

echo_error()   { cecho "$*" $red          ;}
echo_fatal()   { cecho "$*" $red; exit -1 ;}
echo_warning() { cecho "$*" $yellow       ;}
echo_success() { cecho "$*" $green        ;}
echo_info()    { cecho "$*" $blue         ;}

#-------------------------------------------------------------------------------
# From https://stackoverflow.com/questions/4023830/how-to-compare-two-strings-in-dot-separated-version-format-in-bash
# arg1 is a dotted (or not) version number (ex 4.10.6.56-ubunutu) 
# arg2 is a dotted (or not) version number (ex 4.10.6.56-ubunutu)
# return 0 if $1 lower or equal $2, else 1
version_le() {
  [  "$1" = "`echo -e "$1\n$2" | sort -V | head -n1`" ]
}

# From https://stackoverflow.com/questions/4023830/how-to-compare-two-strings-in-dot-separated-version-format-in-bash
version_lt() {
  [ "$1" = "$2" ] && return 1 || version_le $1 $2
}

# From https://stackoverflow.com/questions/4023830/how-to-compare-two-strings-in-dot-separated-version-format-in-bash
version_ge() {
  [  "$1" = "`echo -e "$1\n$2" | sort -V | tail -n1`" ]
}

# From https://stackoverflow.com/questions/4023830/how-to-compare-two-strings-in-dot-separated-version-format-in-bash
version_gt() {
  [ "$1" = "$2" ] && return 1 || version_ge $1 $2
}

########################
# distribution helpers #
########################

#-------------------------------------------------------------------------------
# This function return a string to identify the distribution we are running
# If we can't check the distribution, it returns "Unknown"
# This function return always true as exit code by design
# Examples:
#   ubuntu16.04
#   debian8.5
get_distribution_release() {
    if [[ ! -z "$OS_DISTRO$OS_RELEASE" ]]; then
        echo -n "$OS_DISTRO$OS_RELEASE"
    else
        echo -n Unknown
    fi
}

check_supported_distribution() {
    local distribution=$(get_distribution_release)
    echo "Your distribution is ${distribution}"
    case "$distribution" in
        "ubuntu20.04") return 0 ;;
        "ubuntu18.04") return 0 ;;
        "ubuntu17.10") return 0 ;;
        "ubuntu17.04") return 0 ;;
        "ubuntu16.04") return 0 ;;
        "ubuntu14.04") return 0 ;;
        "rhel7")       return 0 ;;
        "rhel8")       return 0 ;;
        "rhel8.2")     return 0 ;;
        "rhel8.3")     return 0 ;;
        "rhel8.4")     return 0 ;;
        "rhel8.5")     return 0 ;;
        "centos7")     return 0 ;;
        "centos8")     return 0 ;;
    esac
    return 1
}

###########################
# Cleaners
###########################

#-------------------------------------------------------------------------------
clean_kernel() {
  $SUDO modprobe ip_tables
  $SUDO modprobe x_tables
  $SUDO iptables -P INPUT ACCEPT
  $SUDO iptables -F INPUT
  $SUDO iptables -P OUTPUT ACCEPT
  $SUDO iptables -F OUTPUT
  $SUDO iptables -P FORWARD ACCEPT
  $SUDO iptables -F FORWARD
  $SUDO iptables -t nat -F
  $SUDO iptables -t mangle -F
  $SUDO iptables -t filter -F
  $SUDO iptables -t raw -F
  echo_info "Flushed iptables"
}

#-------------------------------------------------------------------------------
clean_all_files() {
  set_openair_env
  dir=$OPENAIRCN_DIR/build
  rm -rf $dir/log 
  rm -rf $dir/spgw/build $dir/spgw/CMakeLists.txt
  rm -rf $dir/mme/build $dir/mme/CMakeLists.txt
  rm -rf $dir/hss/build
  rm -rf $dir/autotests/BIN $dir/autotests/log $dir/autotests/*/build
}

#-------------------------------------------------------------------------------
disable_ipv6() {
  $SUDO sysctl -w net.ipv6.conf.all.disable_ipv6=1
}


#-------------------------------------------------------------------------------
# Compare two versions of software. Returns true if $version is greater than $req_version
# arg1 = version
# arg2 = req_version
#

function version_gt() { 
  test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1"; 
}



###################################
# Compilers
###################################

# From https://stackoverflow.com/a/20473191
# test if a list include item
# arg1 is list, ex "item1 item2 ..."
# arg2 is item
function list_include_item {
  local list="$1"
  local item="$2"
  if [[ $list =~ (^|[[:space:]])"$item"($|[[:space:]]) ]] ; then
    # yes, list include item
    result=0
  else
    result=1
  fi
  return $result
}

# arg 1 Build directory OPENAIR_DIR/build/?/build
# arg 2 Executable target name
# arg 3 Executable name (no path)
# arg 4 Verbose         (1 or 0)
compilations() {
  echo_info "Compilation log for $3 is here: $dlog/$2.txt"
  cd $OPENAIRCN_DIR/build/$1/build
  if [ "a$4" == "a1" ]; then
    set -o pipefail
    {
      rm -f $3
      make $make_args $2
    } | tee $dlog/$2.txt
  else
    {
      rm -f $3
      make $make_args $2
    } > $dlog/$2.txt 2>&1
  fi
  if [ $? == 0 -a -s $3 ] ; then
     echo_success "$2 compiled"
     return 0
  else
     echo_error "$2 compilation failed"
     return 1
  fi
}

###################################
# make test
###################################

# arg 1 Build directory OPENAIRCN_DIR/build/?/build
# arg 2 Executable target name
# arg 3 Executable name (no path)
# arg 4 Verbose         (1 or 0)
make_test() {
  echo_success "unit tests start"
  cd $OPENAIRCN_DIR/build/$1/build
  if [ "a$4" == "a1" ]; then
    {
      make test ARGS="-V"
    } | tee $dlog/$2_test.txt
  else
    {
      make test
    } > $dlog/$2_test.txt 2>&1
  fi
  echo_success "unit tests end"
}

#-------------------------------------------------------------------------------
# arg1 is package name
test_install_package() {
  # usage: test_install_package package_name
 if [ $# -eq 1 ]; then
   dpkg -s "$1" > /dev/null 2>&1 && {
          echo "$1 is installed."
      } || {
      echo "$1 is not installed."
      $SUDO apt-get install --force-yes $1
    }
  fi
}


#-------------------------------------------------------------------------------
update_package_db() {
  if [ ! -f /tmp/no_more_update_package_db ]; then
    $SUDO $INSTALLER update
    [[ $? -ne 0 ]] && return $?
    touch /tmp/no_more_update_package_db
    [[ $? -ne 0 ]] && return $?
  else
    let elapsed_time=$(expr `date +%s` - `stat -c %Y /tmp/no_more_update_package_db`)
    if [ $elapsed_time -gt 3600 ]; then
      $SUDO $INSTALLER update
      [[ $? -ne 0 ]] && return $?
      touch /tmp/no_more_update_package_db
      [[ $? -ne 0 ]] && return $?
    else
      echo "===== Raphael ===="
      echo "no need to update"
    fi
  fi
  return 0
}

#-------------------------------------------------------------------------------
check_enable_epel_repos() {
  # on Enterprise Linuxes, ensure EPEL repos are installed
  # (provides: libidn2-devel, vconfig, iperf, phpMyAdmin, dkms, ...)
  if [[ "$OS_DISTRO" == "rhel" ]] || [[ "$OS_DISTRO" == "centos" ]]; then
    if rpm -q epel-release > /dev/null; then
      echo "EPEL repos already present. Good."
    else
      if [[ "$OS_DISTRO$OS_RELEASE" == "rhel8.2" ]] || \
         [[ "$OS_DISTRO$OS_RELEASE" == "rhel8.3" ]] || \
         [[ "$OS_DISTRO$OS_RELEASE" == "rhel8.4" ]] || \
         [[ "$OS_DISTRO$OS_RELEASE" == "rhel8.5" ]]; then
        echo "Bypassing EPEL repos for the moment"
      else
        echo "EPEL repos not present. Installing them."
        $SUDO $INSTALLER install $OPTION https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
      fi
    fi
  fi
}

#-------------------------------------------------------------------------------
install_asn1c_from_source(){
  if [ $1 -eq 0 ]; then
    OPTION=""
    read -p "Do you want to install asn1c rev 1516 patched? <y/N> " prompt
  else
    prompt='y'
    OPTION="-y"
  fi

  if [[ "$OS_DISTRO" == "ubuntu" ]]; then
    PACKAGE_LIST="\
      autoconf \
      automake \
      bison \
      build-essential \
      flex \
      gcc \
      libtool"
  elif [[ "$OS_BASEDISTRO" == "fedora" ]]; then
    PACKAGE_LIST="\
      autoconf \
      automake \
      bison \
      patch \
      flex \
      gcc \
      libtool"
  else
    echo_fatal "$OS_DISTRO is not a supported distribution."
  fi
  $SUDO $INSTALLER install $OPTION $PACKAGE_LIST

  if [[ $prompt =~ [yY](es)* ]]
  then
    $SUDO rm -rf /tmp/asn1c
    mkdir -p /tmp/asn1c
    GIT_SSL_NO_VERIFY=true git clone https://gitlab.eurecom.fr/oai/asn1c.git /tmp/asn1c
    cd /tmp/asn1c
    ./configure
    make > /tmp/log_compile_asn1c 2>&1
    $SUDO make install
  fi
}

#-------------------------------------------------------------------------------
cidr2mask(){
  local i mask=""
  local full_octets=$(($1/8))
  local partial_octet=$(($1%8))

  for ((i=0;i<4;i+=1)); do
    if [ $i -lt $full_octets ]; then
      mask+=255
    elif [ $i -eq $full_octets ]; then
      mask+=$((256 - 2**(8-$partial_octet)))
    else
      mask+=0
    fi
    test $i -lt 3 && mask+=.
  done

  echo $mask
}

#-------------------------------------------------------------------------------
# example: netcalc 192.168.12.100 255.255.255.0
netcalc(){
  local IFS='.' ip i
  local -a oct msk

  read -ra oct <<<"$1"
  read -ra msk <<<"$2"

  for i in ${!oct[@]}; do
    ip+=( "$(( oct[i] & msk[i] ))" )
  done

  echo "${ip[*]}"
}

#-------------------------------------------------------------------------------
# example:
bcastcalc(){
  local IFS='.' ip i
  local -a oct msk

  read -ra oct <<<"$1"
  read -ra msk <<<"$2"

  for i in ${!oct[@]}; do
    ip+=( "$(( oct[i] + ( 255 - ( oct[i] | msk[i] ) ) ))" )
  done
  echo "${ip[*]}"
}


#-------------------------------------------------------------------------------
# arg1 is network interface name
# output to stdout
get_interface_inet_global_address() {
  if [ "$#" -eq 1 ]; then
    is_interface_up $1
    [[ $? -ne 0 ]] && return $?
    ip -4 addr show $1 scope global | awk '$1 == "inet" {print $2}' | xargs | cut -d '/' -f1
    return 0
  else
    echo_error "usage: get_interface_inet_global_address if_name"
    return 1
  fi
}

#-------------------------------------------------------------------------------
# arg1 is network interface name
# output to stdout
get_interface_inet_global_cidr() {
  if [ "$#" -eq 1 ]; then
    is_interface_up $1
    [[ $? -ne 0 ]] && return $?
    # grep is needed for virtual interfaces
    # But be careful of ens4:1, ens4:10, prefer ens4:1000, ens4:1010 for example
    ip -4 addr show $1 scope global | grep $1 | awk '$1 == "inet" {print $2}' | xargs
    return 0
  else
    echo_error "usage: get_interface_inet_global_address if_name"
    return 1
  fi
}

#-------------------------------------------------------------------------------
# arg1 is network interface name
is_interface_up(){
  if [ "$#" -eq 1 ]; then
    ip a show $1 up | grep $1 > /dev/null
    return $?
  else
    echo_error "usage: is_interface_up if_name"
    return 1
  fi
}


#-------------------------------------------------------------------------------
# arg1 = interface name
# arg2 = ipv4 addr cidr
set_interface_up(){
  interface=$1
  address=${2%/*} #part before '/'
  cidr_netmask=${2#*/} # part after '/'

  if [ "a${interface:0:4}" == "anone" ]; then
    return 1;
  fi
  echo "ifconfig  $interface up"
  $SUDO ifconfig  $interface up
  sync
  netmask=`cidr2mask $cidr_netmask`
  broadcast=`bcastcalc $address $netmask`
  echo "ip -4 addr add  $address/$cidr_netmask broadcast $broadcast dev $interface"
  $SUDO ip -4 addr add  $address/$cidr_netmask broadcast $broadcast dev $interface
  sync
  return 0
}

#-------------------------------------------------------------------------------
# arg1 = interface name
# arg2 = ipv4 addr cidr or ipv4 addr
set_virtual_interface_up(){
  interface=$1
  address=${2%/*} #part before '/'
  cidr_netmask=${2#*/} # part after '/'

  if [ "a${interface:0:4}" == "anone" ]; then
    return 1;
  fi
  case $interface in
    *:*) 
      $SUDO ifconfig  $interface $address up
      return $?
    ;;
  esac
  return 1
}


#-------------------------------------------------------------------------------
# arg1 is a config file (mme.conf, spgw.conf)
set_cn_virtual_interfaces(){
  if [ "$#" -eq 1 ]; then

    declare -a if_arr=("MME_INTERFACE_NAME_FOR_S1_MME" "MME_INTERFACE_NAME_FOR_S11" "MME_INTERFACE_NAME_FOR_S10" 
                  "SGW_INTERFACE_NAME_FOR_S11" "SGW_INTERFACE_NAME_FOR_S1U_S12_S4_UP" "SGW_INTERFACE_NAME_FOR_S5_S8_UP" 
                  "PGW_INTERFACE_NAME_FOR_S5_S8" "PGW_INTERFACE_NAME_FOR_SGI")
                  
    declare -a ip_arr=("MME_IPV4_ADDRESS_FOR_S1_MME" "MME_IPV4_ADDRESS_FOR_S11" "MME_IPV4_ADDRESS_FOR_S10" 
                  "SGW_IPV4_ADDRESS_FOR_S11" "SGW_IPV4_ADDRESS_FOR_S1U_S12_S4_UP" "SGW_IPV4_ADDRESS_FOR_S5_S8_UP"
                  "PGW_IPV4_ADDRESS_FOR_S5_S8" "PGW_IPV4_ADDRESS_FOR_SGI")
    for ((i=0; i<${#if_arr[@]}; ++i)); do
      if_name=${if_arr[i]}
      ip_address=${ip_arr[i]}
      unset $if_name
      unset $ip_address
    done
  
    value="`cat $1 | cut -d "#" -f1 | cut -d "}" -f1 | cut -d "{" -f2 | grep 'ADDRESS\|INTERFACE' | tr -d " " | grep "="`"
    eval $value

    declare -a if_arr=("MME_INTERFACE_NAME_FOR_S1_MME" "MME_INTERFACE_NAME_FOR_S11" "MME_INTERFACE_NAME_FOR_S10" 
                  "SGW_INTERFACE_NAME_FOR_S11" "SGW_INTERFACE_NAME_FOR_S1U_S12_S4_UP" "SGW_INTERFACE_NAME_FOR_S5_S8_UP" 
                  "PGW_INTERFACE_NAME_FOR_S5_S8" "PGW_INTERFACE_NAME_FOR_SGI")
                  
    declare -a ip_arr=("MME_IPV4_ADDRESS_FOR_S1_MME" "MME_IPV4_ADDRESS_FOR_S11" "MME_IPV4_ADDRESS_FOR_S10" 
                  "SGW_IPV4_ADDRESS_FOR_S11" "SGW_IPV4_ADDRESS_FOR_S1U_S12_S4_UP" "SGW_IPV4_ADDRESS_FOR_S5_S8_UP"
                  "PGW_IPV4_ADDRESS_FOR_S5_S8" "PGW_IPV4_ADDRESS_FOR_SGI")

    for ((i=0; i<${#if_arr[@]}; ++i)); do
      if_name=${if_arr[i]}
      ip_address=${ip_arr[i]}      
      if [ -n "$${if_name}" ]; then
        case ${!if_name} in
          *:*) 
            if [ -n "$${ip_address}" ]; then
              echo_success "Configuring ${!if_name}  ${!ip_address}"
              set_virtual_interface_up  ${!if_name}  ${!ip_address} 
              [[ $? -ne 0 ]] && return $?
            else
              echo_error "$ip_address does not exist in your config file $1, but $if_name does!"
              return 1
            fi  
            ;;
        esac
      fi
    done
    return 0
  else
    echo_error "usage: set_cn_virtual_interfaces config_file"
    return 1
  fi
}
################################
# set_openair_env
###############################
#-------------------------------------------------------------------------------
set_openair_env(){
  fullpath=`readlink -f $BASH_SOURCE`
  [ -f "/.$fullpath" ] || fullpath=`readlink -f $PWD/$fullpath`
  openair_path=${fullpath%/build/*}
  openair_path=${openair_path%/scripts/*}
  openair_path=${openair_path%/src/nas/*}
  openair_path=${openair_path%/src/s6a/*}
  export OPENAIRCN_DIR=$openair_path
}


################################
# send ctrl-c and finally force terminate the program and all its child processes
###############################

#-------------------------------------------------------------------------------
function handle_ctrl_c(){
  CURPID=$$
  ppid=$$
  arraycounter=1
  echo_info "** Trapped CTRL-C. Killing all subprocesses now..."
  sync
  while true
  do
    FORLOOP=FALSE
    # Get all the child process id
    for i in `ps -ef| awk '$3 == '$ppid' { print $2 }'`
    do
      if [ $i -ne $CURPID ] ; then
        procid[$arraycounter]=$i
        arraycounter=`expr $arraycounter + 1`
        ppid=$i
        FORLOOP=TRUE
      fi
    done
    if [ "$FORLOOP" = "FALSE" ] ; then
      arraycounter=`expr $arraycounter - 1`
      ## We want to kill child process id first and then parent id's
      while [ $arraycounter -ne 0 ]
      do
        echo "first we send ctrl-c to program"
        $SUDO kill -INT "${procid[$arraycounter]}"
        sleep 5
        echo "Now we force kill if that didn't work"
        $SUDO kill -9 "${procid[$arraycounter]}"
        arraycounter=`expr $arraycounter - 1`
      done
      exit
    fi
  done
}

