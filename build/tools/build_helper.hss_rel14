################################################################################
# Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The OpenAirInterface Software Alliance licenses this file to You under
# the terms found in the LICENSE file in the root of this source tree.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#-------------------------------------------------------------------------------
# For more information about the OpenAirInterface (OAI) Software Alliance:
#      contact@openairinterface.org
################################################################################

# file build_helper.hss_rel14
# brief
# author Laurent Thomas, Lionel GAUTHIER, Tien-Thinh Nguyen
#
#######################################
################################
# include helper functions
################################
SCRIPT=$(readlink -f ${BASH_SOURCE})
THIS_BH_HSS_SCRIPT_PATH=`dirname $SCRIPT`
source $THIS_BH_HSS_SCRIPT_PATH/build_helper

#-------------------------------------------------------------------------------
build_freeDiameter()
{
  pushd $OPENAIRCN_DIR/build/git_submodules/freeDiameter
  patch -p1 <  $OPENAIRCN_DIR/build/patches/0001-opencoord.org.freeDiameter.patch
  ret=$?;[[ $ret -ne 0 ]] && popd && return $ret
  patch -p1 <  $OPENAIRCN_DIR/build/patches/0002-opencoord.org.freeDiameter-ambr-extended-max-requested-bandwidth.patch
  ret=$?;[[ $ret -ne 0 ]] && popd && return $ret
  rm -rf build
  mkdir -p build
  cd build
  $CMAKE ..
  res=$?
  [[ $res -ne 0 ]] && popd && return $res
  awk '{if (/^DISABLE_SCTP/) gsub(/OFF/, "ON"); print}' CMakeCache.txt > tmp && mv tmp CMakeCache.txt
  make -j`nproc`
  res=$?
  [[ $res -ne 0 ]] && popd && return $res
  $SUDO make install
  res=$?
  [[ $res -ne 0 ]] && popd && return $res
  popd
  return $?
}

#-------------------------------------------------------------------------------
build_c_ares()
{
  pushd $OPENAIRCN_DIR/build/git_submodules/c-ares
  ./buildconf
  res=$?
  [[ $res -ne 0 ]] && popd && return $res
  ./configure
  res=$?
  [[ $res -ne 0 ]] && popd && return $res
  make -j`nproc`
  res=$?
  [[ $res -ne 0 ]] && popd && return $res
  $SUDO make install
  res=$?
  [[ $res -ne 0 ]] && popd && return $res
  popd
  return $?
}

#-------------------------------------------------------------------------------
build_cpp_driver()
{
  pushd $OPENAIRCN_DIR/build/git_submodules/cpp-driver
  git checkout -f 2.15.0
  rm -rf build
  mkdir -p build
  cd build
  $CMAKE ..
  res=$?
  [[ $res -ne 0 ]] && popd && return $res
  make -j`nproc`
  res=$?
  [[ $res -ne 0 ]] && popd && return $res
  $SUDO make install
  res=$?
  [[ $res -ne 0 ]] && popd && return $res
  popd
  return $?
}

#-------------------------------------------------------------------------------
build_pistache()
{
  pushd $OPENAIRCN_DIR/build/git_submodules/pistache
  git checkout -f 117db02eda9d63935193ad98be813987f6c32b33
  rm -rf build
  mkdir -p build
  cd build
  $CMAKE -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release ..
  res=$?
  [[ $res -ne 0 ]] && popd && return $res
  make -j`nproc`
  res=$?
  [[ $res -ne 0 ]] && popd && return $res
  $SUDO make install
  res=$?
  [[ $res -ne 0 ]] && popd && return $res
  popd
  return $?
}

build_libuv()
{
    echo "-- Starting libuv Build --"
    rm -rf /tmp/libuv
    git clone --depth=1 --branch=v1.23.1 https://github.com/libuv/libuv.git /tmp/libuv
    cd /tmp/libuv
    mkdir -p build
    cd build
    $CMAKE ..
    res=$?
    [[ $res -ne 0 ]] && return $res
    make -j`nproc`
    res=$?
    [[ $res -ne 0 ]] && return $res
    $SUDO make install
    res=$?
    [[ $res -ne 0 ]] && return $res
    echo "-- libuv Build Successful --"
    return $?
}

#-------------------------------------------------------------------------------
init_submodules()
{
  # Because of patch, TODO cleaner
  rm -Rf $OPENAIRCN_DIR/build/git_submodules/freeDiameter/*
  cd $OPENAIRCN_DIR
  echo "git submodule init"
  # Taking care of the case this repository is a sub-module
  # And we are in a container
  if [ -f .git ] && [ $IS_CONTAINER -ne 0 ]; then
    rm -f .git
    git init 2>&1 > /dev/null
    if [ -f .gitmodules ]; then
      mv .gitmodules .gitmodules.old
      grep path .gitmodules.old | sed -e "s@^.*path = @@" > pathlist.txt
      grep url .gitmodules.old | sed -e "s@^.*url = @@" > urllist.txt
      path_list=( $(grep build pathlist.txt) )
      url_list=( $(grep git urllist.txt) )
      rm -f urllist.txt pathlist.txt
      rm -Rf build/git_submodules/
      mkdir build/git_submodules/
      len=${#url_list[@]}
      for (( i=0; i<$len; i++ )); do
        git submodule add -b master ${url_list[$i]} ${path_list[$i]} 2>&1 > /dev/null
      done
      git submodule deinit --all --force 2>&1 > /dev/null
    fi
  fi
  git submodule init
  ret=$?;[[ $ret -ne 0 ]] && return $ret
  echo "git submodule foreach --recursive git clean -xfd"
  git submodule foreach --recursive git clean -xfd
  ret=$?;[[ $ret -ne 0 ]] && return $ret
  echo "git submodule foreach --recursive git reset --hard"
  git submodule foreach --recursive git reset --hard
  ret=$?;[[ $ret -ne 0 ]] && return $ret
  # we are looping to make sure we are OK in CI
  echo "git submodule update"
  local cnt="0"
  while [ $cnt -lt 3 ]
  do
      git submodule update
      ret=$?
      if [[ $ret -ne 0 ]]
      then
          cnt=$[$cnt+1]
      else
          cnt=10
      fi
  done
  [[ $ret -ne 0 ]] && return $ret
  echo "git submodule foreach git pull origin master"
  local cnt="0"
  while [ $cnt -lt 3 ]
  do
      git submodule foreach git pull origin master
      ret=$?
      if [[ $ret -ne 0 ]]
      then
          cnt=$[$cnt+1]
      else
          cnt=10
      fi
  done
  [[ $ret -ne 0 ]] && return $ret

  set_openair_env
  dir=$OPENAIRCN_DIR/build/hss_rel14
 
  build_freeDiameter
  ret=$?;[[ $ret -ne 0 ]] && return $ret
  build_c_ares
  ret=$?;[[ $ret -ne 0 ]] && return $ret
  build_cpp_driver
  ret=$?;[[ $ret -ne 0 ]] && return $ret
  build_pistache
  ret=$?;[[ $ret -ne 0 ]] && return $ret
  
  $SUDO ldconfig
  return $?
}

#-------------------------------------------------------------------------------
build_util()
{
  case "$1" in
    Release)
      opt_args='COPT_FLAGS="-O3"'
      ;;
    Debug)
      opt_args='COPT_FLAGS="-g"'
      ;;
    RelWithDebInfo)
      opt_args='COPT_FLAGS="-Og"'
      ;;
    MinSizeRel)
      opt_args='COPT_FLAGS="-Os"'
      ;;
  esac
  pushd $OPENAIRCN_DIR/build/hss_rel14/util
  rm -rf build
  mkdir -p build
  make $opt_args -j`nproc`
  res=$?
  popd
  return $res
}


#-------------------------------------------------------------------------------
build_hsssec()
{
  case "$1" in
    Release)
      opt_args='COPT_FLAGS="-O3"'
      ;;
    Debug)
      opt_args='COPT_FLAGS="-g"'
      ;;
    RelWithDebInfo)
      opt_args='COPT_FLAGS="-Og"'
      ;;
    MinSizeRel)
      opt_args='COPT_FLAGS="-Os"'
      ;;
  esac
  pushd $OPENAIRCN_DIR/build/hss_rel14/hsssec
  rm -rf build
  mkdir -p build
  make $opt_args -j`nproc`
  res=$?
  popd
  return $res
}


#-------------------------------------------------------------------------------
build_hss()
{
  pushd $OPENAIRCN_DIR/build/hss_rel14
  make clean
  make -j`nproc`
  res=$?
  popd
  return $res
}

#-------------------------------------------------------------------------------
#arg1 is force (no interactive script)
check_install_hss_software() {
  if ! check_supported_distribution; then
    echo_error "Your distribution $(get_distribution_release) is not supported by openair-cn"
    return 1
  fi
  if [ $1 -gt 0 ]; then 
    OPTION="-y"
  else
    OPTION=""
  fi

  check_enable_epel_repos

  # packages
  if [[ $OS_DISTRO == "ubuntu" ]]; then
    case "$(get_distribution_release)" in
	"ubuntu20.04")
	    specific_packages="libgnutls28-dev libgcrypt20-dev "
	    ;;
	"ubuntu17.04" | "ubuntu17.10" | "ubuntu18.04")
	    specific_packages="libgnutls28-dev libgcrypt-dev python-cassandra python-blist"
	    ;;
	"ubuntu14.04" | "ubuntu16.04")
	    specific_packages="libgnutls-dev libgcrypt-dev python-cassandra python-blist"
	    ;;
    esac
    PACKAGE_LIST="\
      $specific_packages \
      g++ \
      make \
      $CMAKE \
      libuv1-dev \
      libssl-dev \
      autotools-dev \
      libtool-bin \
      m4 \
      automake \
      libmemcached-dev \
      memcached \
      cmake-curses-gui \
      python3-cassandra \
      python3-blist \
      gcc \
      bison \
      flex \
      libsctp-dev \
      libidn11-dev \
      nettle-dev"
  elif [[ "$OS_BASEDISTRO" == "fedora" ]]; then
    case "$(get_distribution_release)" in
      "centos7")
        specific_packages="libuv-devel"
        ;;
      "centos8")
        $SUDO $INSTALLER install -y wget pkg-config
        wget --tries=3 --retry-connrefused http://mirror.centos.org/centos/8/AppStream/x86_64/os/Packages/libuv-1.23.1-1.el8.x86_64.rpm
        $SUDO rpm -i libuv-1.23.1-1.el8.x86_64.rpm
        wget --tries=3 --retry-connrefused https://download-ib01.fedoraproject.org/pub/epel/8/Modular/x86_64/Packages/l/libuv-devel-1.23.1-1.module_el8+8246+46ee4016.x86_64.rpm
        $SUDO rpm -i libuv-devel-1.23.1-1.module_el8+8246+46ee4016.x86_64.rpm
        rm -f libuv-devel-1.23.1-1.module_el8+8246+46ee4016.x86_64.rpm libuv-1.23.1-1.el8.x86_64.rpm
        specific_packages="clang"
        ;;
      "rhel8.2" | "rhel8.3" | "rhel8.4" | "rhel8.5")
        specific_packages="libuv"
        $SUDO yum install $OPTION --enablerepo="codeready-builder-for-rhel-8-x86_64-rpms" $specific_packages gcc-c++ make $CMAKE openssl-devel libtool m4 automake patch libmemcached-devel memcached gcc bison flex lksctp-tools-devel gnutls-devel libgcrypt-devel libidn-devel nettle-devel
        OPTION='${OPTION} --enablerepo="ubi-8-codeready-builder"'
        ;;
    esac
    # LG: TODO check package list for Fedora
    PACKAGE_LIST="\
      $specific_packages \
      gcc-c++ \
      make \
      $CMAKE \
      openssl-devel \
      libtool \
      m4 \
      automake \
      patch \
      libmemcached-devel \
      memcached \
      gcc \
      bison \
      flex \
      lksctp-tools-devel \
      gnutls-devel \
      libgcrypt-devel \
      libidn-devel \
      nettle-devel"
  else
    echo_fatal "$OS_DISTRO is not a supported distribution."
  fi
  if [[ "$(get_distribution_release)" == "rhel8.2" ]] || \
     [[ "$(get_distribution_release)" == "rhel8.3" ]] || \
     [[ "$(get_distribution_release)" == "rhel8.4" ]] || \
     [[ "$(get_distribution_release)" == "rhel8.5" ]]; then
    echo "====== Raphael ===="
    echo "bypassing (already done) : $SUDO $INSTALLER install $OPTION $PACKAGE_LIST"
    build_libuv
  else
    $SUDO $INSTALLER install $OPTION $PACKAGE_LIST
  fi
  ret=$?;[[ $ret -ne 0 ]] && return $ret

  init_submodules
  return $? 
}

